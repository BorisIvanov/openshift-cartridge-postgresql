#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH

# Build package version a.b.c-d from manifest version a.b.c.d
manifest_version=$2
version=$(echo "${manifest_version}" | sed 's/\(.*\)\./\1-/')

# Download
curl -L -o ${TMP}bigsql.tar.bz2 http://oscg-downloads.s3.amazonaws.com/packages/bigsql-${version}-linux64.tar.bz2

# Create bin directory if necessary
mkdir -p ${OPENSHIFT_DATA_DIR}.bigsql

# Copy just the mecessary files
tar -jxvf ${TMP}bigsql.tar.bz2 --strip-components=1 -C ${OPENSHIFT_DATA_DIR}.bigsql

# Remove downloaded archive
rm ${TMP}bigsql.tar.bz2

# Run initdb
initdb -E UTF8

# Setup
erb <<EOF >> ${PGDATA}/postgresql.conf

################################################################################
##### Generated by cartridge setup
listen_addresses = '${OPENSHIFT_PG_HOST}'
max_connections = 100
shared_buffers = <%= ENV['OPENSHIFT_APP_DNS'] == ENV['OPENSHIFT_GEAR_DNS'] ? 16 : (ENV['OPENSHIFT_GEAR_MEMORY_MB'].to_i * 0.2).to_i %>MB
effective_cache_size = <%= ENV['OPENSHIFT_APP_DNS'] == ENV['OPENSHIFT_GEAR_DNS'] ? 40 : (ENV['OPENSHIFT_GEAR_MEMORY_MB'].to_i * 0.55).to_i %>MB
autovacuum = off        # not supported on OpenShift, see README
track_activities = off  # not supported on OpenShift, see README
track_counts = off      # not supported on OpenShift, see README
logging_collector = on
log_directory = '${OPENSHIFT_LOG_DIR}'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_rotation_age = 1d
################################################################################
EOF

cat <<EOF >> ${PGDATA}/pg_hba.conf

################################################################################
##### Generated by cartridge setup:
##### It's safe for PostgreSQL to accept from any host, since by default
##### OpenShift only allows external connections through SSH tunnels
host  all  all  0.0.0.0/0  md5
################################################################################
EOF

# Start server
pg_ctl start -w

# Create database and user password
pg_password=$(generate_password)
psql -d postgres -c "CREATE DATABASE ${OPENSHIFT_APP_NAME};"
psql -d postgres -c "ALTER USER "${OPENSHIFT_GEAR_UUID}" WITH PASSWORD '${pg_password}';"

# Add environment variables
echo "${OPENSHIFT_GEAR_UUID}" > $OPENSHIFT_PG_DIR/env/OPENSHIFT_PG_USERNAME
echo "${pg_password}"         > $OPENSHIFT_PG_DIR/env/OPENSHIFT_PG_PASSWORD
echo "${OPENSHIFT_APP_NAME}"  > $OPENSHIFT_PG_DIR/env/OPENSHIFT_PG_DATABASE

# Output results
client_result "PostgreSQL ${version} installed."
client_result "Please save this info for future reference:"
client_result "- Created password ${pg_password} for user ${OPENSHIFT_GEAR_UUID}"
client_result "- Database ${OPENSHIFT_APP_NAME} created"
client_result "- You can login directly to this gear with ssh ${OPENSHIFT_GEAR_UUID}@${OPENSHIFT_GEAR_DNS}"
client_result "- You can install postgis component by running postgres/bin/install-postgis script in this gear"
client_result "- The following environment variables are available to your application:"
client_result "  \$OPENSHIFT_PG_HOST, \$OPENSHIFT_PG_PORT, \$OPENSHIFT_PG_USERNAME, \$OPENSHIFT_PG_PASSWORD \$OPENSHIFT_PG_DATABASE"
client_result "- You can connect from your development machine using rhc with:"
if [ "${OPENSHIFT_APP_DNS}" == "${OPENSHIFT_GEAR_DNS}" ]; then
  client_result "  rhc port-forward -a ${OPENSHIFT_APP_NAME}"
else
  client_result "  rhc port-forward -a ${OPENSHIFT_APP_NAME} -g ${OPENSHIFT_GEAR_UUID}"
fi
client_result "...or directly from a SSH-tunnel-enabled SQL client with:"
client_result "  Host: ${OPENSHIFT_GEAR_DNS}"
if [ "${OPENSHIFT_APP_DNS}" == "${OPENSHIFT_GEAR_DNS}" ]; then
  client_result "  Port: ${OPENSHIFT_PG_PORT}"
else
  client_result "  Port: ${OPENSHIFT_PG_PROXY_PORT}"
fi
